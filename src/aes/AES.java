package aes;

/**
 * @author sofyan_sugianto
 * @author putri_kharisma
 * @author fatimatus_zahro
 */

public class AES {

    private static final String banner = "AES CRYPTOGRAPHY PROGRAM\n"
      + "------------------------\n"
      + "1. ENCRYPT\n"
      + "2. DECRYPT\n"
      + "------------------------\n"
      + "Pilih (1/2) ? ";
    /**
     * AES-128
     */
    private static final int Nk = 4; // panjang kunci tiap blok
    private static final int Nb = 4; // panjang blok teks
    private static final int Nr = 10; // banyak putaran yang harus dilakukan

    //blok sbox
    public static final int[][] sbox = {
        /*0    1      2     3     4      5     6     7     8    9     A     B      C    D     E     F  */
   /*0*/{0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76}, 
   /*1*/{0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0}, 
   /*2*/{0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15}, 
   /*3*/{0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75}, 
   /*4*/{0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84}, 
   /*5*/{0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf}, 
   /*6*/{0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8}, 
   /*7*/{0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2}, 
   /*8*/{0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73}, 
   /*9*/{0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb}, 
   /*A*/{0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79}, 
   /*B*/{0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08}, 
   /*C*/{0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a}, 
   /*D*/{0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e}, 
   /*E*/{0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf}, 
   /*F*/{0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16}};
    
    //invers sbox
    public static final int[][] invsbox = {
        /*0    1      2     3     4      5     6     7     8    9     A     B      C    D     E     F  */
   /*0*/{0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb}, 
   /*1*/{0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb}, 
   /*2*/{0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e}, 
   /*3*/{0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25}, 
   /*4*/{0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92}, 
   /*5*/{0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84}, 
   /*6*/{0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06}, 
   /*7*/{0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b}, 
   /*8*/{0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73}, 
   /*9*/{0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e}, 
   /*A*/{0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b}, 
   /*B*/{0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4}, 
   /*C*/{0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f}, 
   /*D*/{0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef}, 
   /*E*/{0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61}, 
   /*F*/{0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d}};
    
    public static final int[][] tabelGalois = {
        {0x02, 0x03, 0x01, 0x01},
        {0x01, 0x02, 0x03, 0x01},
        {0x01, 0x01, 0x02, 0x03},
        {0x03, 0x01, 0x01, 0x02}
    };
    public static final int[][] invTabelGalois = {
        //14 13 11 9
        {0x0e, 0x0b, 0x0d, 0x09},
        {0x09, 0x0e, 0x0b, 0x0d},
        {0x0d, 0x09, 0x0e, 0x0b},
        {0x0b, 0x0d, 0x09, 0x0e}
    };

    public static void main(String[] args) {
        String text = "Hello World";
        String kunci = "hai";
        int[][] encrypted = encrypt(text,kunci);
        String hasilEnkripsi = "";
        for (int i = 0; i < 4; i++) {
            for (int j = 0; j < 4; j++) {
                hasilEnkripsi += (char)encrypted[j][i];
            }
        }
        System.out.println("plain text: "+text);
        System.out.println("enkrypted="+hasilEnkripsi);
    }

    // fungsi untuk enkripsi
    private static int[][] encrypt(String plainText, String kunci) {
        int[][] result = new int[4][4];
        int[][] state = new int[4][4];
        int[][] key = new int[4][4];
        convertBytes2State(plainText.getBytes(), state);
        convertBytes2State(kunci.getBytes(), key);
        
        // kunci yang akan digunakan untuk key tiap round
        // butuh: original key + Nr * 16
        int[][] expandedKey = new int[4][4 * Nr + 4];
        // ronde yang dibutuhkan: -> untuk AES-128 butuh 10 ronde, tetapi untuk pengulangannya butuh 9 ronde, 1 ronde di final round
        int banyakRonde = 9;
        // ekspansi kunci 
        keyExpansion(key,expandedKey);
             
        // initial round -> addroundkey
        addRoundKey(state,expandedKey);
        
        // pengulangan round 
        for (int i = 0; i < banyakRonde ; i++) {
            subBytes(state);
            shiftRow(state);
            mixColumn(state);
            addRoundKey(state, expandedKey, 4 * (i + 1));
        }
        
        // final round
        subBytes(state);
        shiftRow(state);
        addRoundKey(state, expandedKey, 40);
        
        // copy bytes ke string
        for (int i = 0; i < 4; i++) {
            for (int j = 0; j < 4; j++) {
                result[i][j] = state[j][i];
            }
        }
        return result;
    }

    // fungsi untuk dekripsi
    private static void decrypt(String cipherText, String kunci) {
        int[][] state = new int[4][4];
        int[][] key = new int[4][4];
        // kunci yang akan digunakan untuk key tiap round
        // butuh: original key + Nr * 16
        int[][] expandedKey = new int[4][4 * Nr + 4];
        // ronde yang dibutuhkan: -> untuk AES-128 butuh 10 ronde, tetapi untuk pengulangannya butuh 9 ronde, 1 ronde di final round
        int banyakRonde = 9;
        
        keyExpansion(key,expandedKey);
             
        // initial round -> addroundkey shiftrow dan subbytes
        addRoundKey(state, expandedKey, 40);
        invShiftRow(state);
        invSubBytes(state);
        
        // pengulangan round 
        for (int i = 0; i < banyakRonde ; i++) {
            addRoundKey(state, expandedKey, 4 * (i + 1));
            invMixColumn(state);
            invShiftRow(state);
            invSubBytes(state);
        }
        
        // final round
        addRoundKey(state,expandedKey);
        
    }

    // fungsi untuk keyExpansion
    private static void keyExpansion(int[][] inputKey, int[][] expandedKey) {
        // Kunci awal dari expandedKey adalah input key itu sendiri..
        for (int i = 0; i < 4; i++) {
            for (int j = 0; j < 4; j++) {
                expandedKey[i][j] = inputKey[i][j];
            }
        }
        
        int currentGeneratedWords = 4;
        int rconState = 1; // key rcon dimulai dari 1
        int temp[] = new int[4];
        while(currentGeneratedWords < (4 * Nr)+4){
            for (int i = 0; i < 4; i++) {
                temp[i] = expandedKey[i][currentGeneratedWords - 1];
            }
            // setiap 4 word kunci yang  telah digenerate, lakukan operasi rcon
            if (currentGeneratedWords % 4 == 0) {
                keyExpansionCore(temp, rconState);
                rconState++;
            }
            
            // melakukan XOR dengan kunci 4bit awal yang sudah digenerate
            for (int i = 0; i < 4; i++) {
                expandedKey[i][currentGeneratedWords] = expandedKey[i][currentGeneratedWords - 4] ^ temp[i];
            }
                currentGeneratedWords++;
        }
    }
    
    // core dari keyExpansion -> rotasi - subword (subBytes) - Rcon
    private static void keyExpansionCore(int[] input, int index){
       // rotasi
       int temp = input[0];
       input[0] = input[1];
       input[1] = input[2];
       input[2] = input[3];
       input[3] = temp;
       
       // subwords 
        for (int i = 0; i < 4; i++) {
            input[i] = sbox[input[i]/16][input[i]%16];
        }
        
        // rcon
        input[0] ^= rcon[index];

    }
    
    // memasukkan round key dari key ke state, yang sesungguhnya adalah operasi XOR dari keduanya..
    private static void addRoundKey(int[][] state, int[][] key) {
        for (int i = 0; i < 4; i++) {
            for (int j = 0; j < 4; j++) {
                state[i][j] ^= key[i][j];
            }
        }
    }
    
    private static void addRoundKey(int[][] state, int[][] key,int begin) {
        for (int i = 0; i < 4; i++) {
            for (int j = 0; j < 4; j++) {
                state[i][j] ^= key[i][begin + j];
            }
        }
    }

    // operasi subBytes -> mengganti setiap elemen state dengan nilai sbox yang sesuai
    private static void subBytes(int[][] state) {
        for (int i = 0; i < state.length; i++) {
            for (int j = 0; j < state[0].length; j++) {
                int hex = state[i][j];
                state[i][j]=sbox[hex/16][hex%16];
//                System.out.print((state[i][j])+"\t");
            }
//            System.out.println("");
        }
    }

    // menggeser tiap baris ke kiri, lalu kelebihan kolomnya digeser ke paling kanan
    private static void shiftRow(int[][] state) {
        int[][] temp = new int[4][4];
        //row 1 tetap
        temp[0][0] = state[0][0];
        temp[0][1] = state[0][1];
        temp[0][2] = state[0][2];
        temp[0][3] = state[0][3];
        //row 2 geser kiri 1x
        temp[1][0] = state[1][1];
        temp[1][1] = state[1][2];
        temp[1][2] = state[1][3];
        temp[1][3] = state[1][0];
        //row 3 geser kiri 2x
        temp[2][0] = state[2][2];
        temp[2][1] = state[2][3];
        temp[2][2] = state[2][0];
        temp[2][3] = state[2][1];
        //row 4 geser kiri 3x
        temp[3][0] = state[3][3];
        temp[3][1] = state[3][0];
        temp[3][2] = state[3][1];
        temp[3][3] = state[3][2];
        // copy data temp ke state asli..
        for (int i = 0; i < 4; i++) {
            for (int j = 0; j < 4; j++) {
                state[i][j] = temp[i][j];
            }
        }
        // end shiftRow
    }

    // operasi Mix Column
    private static void mixColumn(int[][] state) {
        int temp[][] = new int[4][4];
        
        //kolom 1
        temp[0][0] = mc2[state[0][0]/16][state[0][0]%16] ^ mc3[state[1][0]/16][state[1][0]%16] ^ state[2][0] ^ state[3][0];
        temp[1][0] = state[0][0] ^ mc2[state[1][0]/16][state[1][0]%16] ^ mc3[state[2][0]/16][state[2][0]%16] ^ state[3][0];
        temp[2][0] = state[0][0] ^ state[1][0] ^ mc2[state[2][0]/16][state[2][0]%16] ^ mc3[state[3][0]/16][state[3][0]%16];
        temp[3][0] = mc3[state[0][0]/16][state[0][0]%16] ^ state[1][0] ^ state[2][0] ^ mc2[state[3][0]/16][state[3][0]%16];

        // kolom 2
        temp[0][1] = mc2[state[0][1]/16][state[0][1]%16] ^ mc3[state[1][1]/16][state[1][1]%16] ^ state[2][1] ^ state[3][1];
        temp[1][1] = state[0][1] ^ mc2[state[1][1]/16][state[1][1]%16] ^ mc3[state[2][1]/16][state[2][1]%16] ^ state[3][1];
        temp[2][1] = state[0][1] ^ state[1][1] ^ mc2[state[2][1]/16][state[2][1]%16] ^ mc3[state[3][1]/16][state[3][1]%16];
        temp[3][1] = mc3[state[0][1]/16][state[0][1]%16] ^ state[1][1] ^ state[2][1] ^ mc2[state[3][1]/16][state[3][1]%16];

        // kolom 3
        temp[0][2] = mc2[state[0][2]/16][state[0][2]%16] ^ mc3[state[1][2]/16][state[1][2]%16] ^ state[2][2] ^ state[3][2];
        temp[1][2] = state[0][2] ^ mc2[state[1][2]/16][state[1][2]%16] ^ mc3[state[2][2]/16][state[2][2]%16] ^ state[3][2];
        temp[2][2] = state[0][2] ^ state[1][2] ^ mc2[state[2][2]/16][state[2][2]%16] ^ mc3[state[3][2]/16][state[3][2]%16];
        temp[3][2] = mc3[state[0][2]/16][state[0][2]%16] ^ state[1][2] ^ state[2][2] ^ mc2[state[3][2]/16][state[3][2]%16];

        //kolom 4
        temp[0][3] = mc2[state[0][3]/16][state[0][3]%16] ^ mc3[state[1][3]/16][state[1][3]%16] ^ state[2][3] ^ state[3][3];
        temp[1][3] = state[0][3] ^ mc2[state[1][3]/16][state[1][3]%16] ^ mc3[state[2][3]/16][state[2][3]%16] ^ state[3][3];
        temp[2][3] = state[0][3] ^ state[1][3] ^ mc2[state[2][3]/16][state[2][3]%16] ^ mc3[state[3][3]/16][state[3][3]%16];
        temp[3][3] = mc3[state[0][3]/16][state[0][3]%16] ^ state[1][3] ^ state[2][3] ^ mc2[state[3][3]/16][state[3][3]%16];        
        
        // copy data temp ke state di parameter...
        for (int i = 0; i < temp.length; i++) {
            for (int j = 0; j < temp[i].length; j++) {
                state[i][j] = temp[i][j];
            }
        }
    }
    
    // konversi dari bytes ke array 4x4
    private static void convertBytes2State(byte[] bytesText, int[][] state) {
        for (int i = 0; i < bytesText.length; i++) {
            state[i%4][i/4]=bytesText[i];
        }
    }

    //fungsi fungsi untuk dekripsi
        private static void invShiftRow(int[][] state) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    private static void invSubBytes(int[][] state) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    private static void invMixColumn(int[][] state) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }
    
    public static int[][] mc2 = {
              /*0    1      2     3     4     5     6    7      8    9      a    b      c     d    e     f*/
    /*0*/    {0x00, 0x02, 0x04, 0x06, 0x08, 0x0a, 0x0c, 0x0e, 0x10, 0x12, 0x14, 0x16, 0x18, 0x1a, 0x1c, 0x1e},
    /*1*/    {0x20, 0x22, 0x24, 0x26, 0x28, 0x2a, 0x2c, 0x2e, 0x30, 0x32, 0x34, 0x36, 0x38, 0x3a, 0x3c, 0x3e},
    /*2*/    {0x40, 0x42, 0x44, 0x46, 0x48, 0x4a, 0x4c, 0x4e, 0x50, 0x52, 0x54, 0x56, 0x58, 0x5a, 0x5c, 0x5e},
    /*3*/    {0x60, 0x62, 0x64, 0x66, 0x68, 0x6a, 0x6c, 0x6e, 0x70, 0x72, 0x74, 0x76, 0x78, 0x7a, 0x7c, 0x7e},
    /*4*/    {0x80, 0x82, 0x84, 0x86, 0x88, 0x8a, 0x8c, 0x8e, 0x90, 0x92, 0x94, 0x96, 0x98, 0x9a, 0x9c, 0x9e},
    /*5*/    {0xa0, 0xa2, 0xa4, 0xa6, 0xa8, 0xaa, 0xac, 0xae, 0xb0, 0xb2, 0xb4, 0xb6, 0xb8, 0xba, 0xbc, 0xbe},
    /*6*/    {0xc0, 0xc2, 0xc4, 0xc6, 0xc8, 0xca, 0xcc, 0xce, 0xd0, 0xd2, 0xd4, 0xd6, 0xd8, 0xda, 0xdc, 0xde},
    /*7*/    {0xe0, 0xe2, 0xe4, 0xe6, 0xe8, 0xea, 0xec, 0xee, 0xf0, 0xf2, 0xf4, 0xf6, 0xf8, 0xfa, 0xfc, 0xfe},
    /*8*/    {0x1b, 0x19, 0x1f, 0x1d, 0x13, 0x11, 0x17, 0x15, 0x0b, 0x09, 0x0f, 0x0d, 0x03, 0x01, 0x07, 0x05},
    /*9*/    {0x3b, 0x39, 0x3f, 0x3d, 0x33, 0x31, 0x37, 0x35, 0x2b, 0x29, 0x2f, 0x2d, 0x23, 0x21, 0x27, 0x25},
    /*a*/    {0x5b, 0x59, 0x5f, 0x5d, 0x53, 0x51, 0x57, 0x55, 0x4b, 0x49, 0x4f, 0x4d, 0x43, 0x41, 0x47, 0x45},
    /*b*/    {0x7b, 0x79, 0x7f, 0x7d, 0x73, 0x71, 0x77, 0x75, 0x6b, 0x69, 0x6f, 0x6d, 0x63, 0x61, 0x67, 0x65},
    /*c*/    {0x9b, 0x99, 0x9f, 0x9d, 0x93, 0x91, 0x97, 0x95, 0x8b, 0x89, 0x8f, 0x8d, 0x83, 0x81, 0x87, 0x85},
    /*d*/    {0xbb, 0xb9, 0xbf, 0xbd, 0xb3, 0xb1, 0xb7, 0xb5, 0xab, 0xa9, 0xaf, 0xad, 0xa3, 0xa1, 0xa7, 0xa5},
    /*e*/    {0xdb, 0xd9, 0xdf, 0xdd, 0xd3, 0xd1, 0xd7, 0xd5, 0xcb, 0xc9, 0xcf, 0xcd, 0xc3, 0xc1, 0xc7, 0xc5},
    /*f*/    {0xfb, 0xf9, 0xff, 0xfd, 0xf3, 0xf1, 0xf7, 0xf5, 0xeb, 0xe9, 0xef, 0xed, 0xe3, 0xe1, 0xe7, 0xe5}};

    public static int[][] mc3 = {
             /*0    1      2     3     4     5     6    7      8    9      a    b      c     d    e     f*/
    /*0*/    {0x00, 0x03, 0x06, 0x05, 0x0c, 0x0f, 0x0a, 0x09, 0x18, 0x1b, 0x1e, 0x1d, 0x14, 0x17, 0x12, 0x11},
    /*1*/    {0x30, 0x33, 0x36, 0x35, 0x3c, 0x3f, 0x3a, 0x39, 0x28, 0x2b, 0x2e, 0x2d, 0x24, 0x27, 0x22, 0x21},
    /*2*/    {0x60, 0x63, 0x66, 0x65, 0x6c, 0x6f, 0x6a, 0x69, 0x78, 0x7b, 0x7e, 0x7d, 0x74, 0x77, 0x72, 0x71},
    /*3*/    {0x50, 0x53, 0x56, 0x55, 0x5c, 0x5f, 0x5a, 0x59, 0x48, 0x4b, 0x4e, 0x4d, 0x44, 0x47, 0x42, 0x41},
    /*4*/    {0xc0, 0xc3, 0xc6, 0xc5, 0xcc, 0xcf, 0xca, 0xc9, 0xd8, 0xdb, 0xde, 0xdd, 0xd4, 0xd7, 0xd2, 0xd1},
    /*5*/    {0xf0, 0xf3, 0xf6, 0xf5, 0xfc, 0xff, 0xfa, 0xf9, 0xe8, 0xeb, 0xee, 0xed, 0xe4, 0xe7, 0xe2, 0xe1},
    /*6*/    {0xa0, 0xa3, 0xa6, 0xa5, 0xac, 0xaf, 0xaa, 0xa9, 0xb8, 0xbb, 0xbe, 0xbd, 0xb4, 0xb7, 0xb2, 0xb1},
    /*7*/    {0x90, 0x93, 0x96, 0x95, 0x9c, 0x9f, 0x9a, 0x99, 0x88, 0x8b, 0x8e, 0x8d, 0x84, 0x87, 0x82, 0x81},
    /*8*/    {0x9b, 0x98, 0x9d, 0x9e, 0x97, 0x94, 0x91, 0x92, 0x83, 0x80, 0x85, 0x86, 0x8f, 0x8c, 0x89, 0x8a},
    /*9*/    {0xab, 0xa8, 0xad, 0xae, 0xa7, 0xa4, 0xa1, 0xa2, 0xb3, 0xb0, 0xb5, 0xb6, 0xbf, 0xbc, 0xb9, 0xba},
    /*a*/    {0xfb, 0xf8, 0xfd, 0xfe, 0xf7, 0xf4, 0xf1, 0xf2, 0xe3, 0xe0, 0xe5, 0xe6, 0xef, 0xec, 0xe9, 0xea},
    /*b*/    {0xcb, 0xc8, 0xcd, 0xce, 0xc7, 0xc4, 0xc1, 0xc2, 0xd3, 0xd0, 0xd5, 0xd6, 0xdf, 0xdc, 0xd9, 0xda},
    /*c*/    {0x5b, 0x58, 0x5d, 0x5e, 0x57, 0x54, 0x51, 0x52, 0x43, 0x40, 0x45, 0x46, 0x4f, 0x4c, 0x49, 0x4a},
    /*d*/    {0x6b, 0x68, 0x6d, 0x6e, 0x67, 0x64, 0x61, 0x62, 0x73, 0x70, 0x75, 0x76, 0x7f, 0x7c, 0x79, 0x7a},
    /*e*/    {0x3b, 0x38, 0x3d, 0x3e, 0x37, 0x34, 0x31, 0x32, 0x23, 0x20, 0x25, 0x26, 0x2f, 0x2c, 0x29, 0x2a},
    /*f*/    {0x0b, 0x08, 0x0d, 0x0e, 0x07, 0x04, 0x01, 0x02, 0x13, 0x10, 0x15, 0x16, 0x1f, 0x1c, 0x19, 0x1a}   };
    
    public static final int[] rcon = {
        0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 
    0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 
    0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 
    0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 
    0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 
    0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 
    0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 
    0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 
    0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 
    0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 
    0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 
    0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 
    0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 
    0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 
    0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 
    0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d
    };
}

